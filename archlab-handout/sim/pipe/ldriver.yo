                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4c806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f64804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f73802000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | ## You can modify this portion
                            | #	# Loop header
                            | #	xorq %rax,%rax		# count = 0;
                            | #	andq %rdx,%rdx		# len <= 0?
                            | #	jle Done		# if so, goto Done:
                            | #
                            | #Loop:	
                            | #	mrmovq (%rdi), %r10	# read val from src...
                            | #	iaddq $8, %rsi		# dst++
                            | #	rmmovq %r10, $-8(%rsi)	# ...and store it to dst
                            | #	andq %r10, %r10		# val <= 0?
                            | #	jle Npos		# if so, goto Npos:
                            | #	iaddq $1, %rax		# count++
                            | #Npos:	
                            | #	iaddq $8, %rdi		# src++
                            | #	#iaddq $8, %rsi		# dst++
                            | #	iaddq $-1, %rdx
                            | #	jg Loop			# if so, goto Loop:
                            | 
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x036: 713602000000000000   | 	jle Done		# if so, goto Done:
0x03f:                      | Loop6:
0x03f: c0f2faffffffffffffff | 	iaddq $-6, %rdx
0x049: 726501000000000000   | 	jl Else
0x052: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x05c: 50970800000000000000 | 	mrmovq 0x8(%rdi), %r9
0x066: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x070: 40960800000000000000 | 	rmmovq %r9, 0x8(%rsi)
0x07a: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x07c: 718f00000000000000   | 	jle Npos		# if so, goto Npos:
0x085: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x08f:                      | Npos:
0x08f: 6299                 | 	andq %r9, %r9		# val <= 0?
0x091: 71a400000000000000   | 	jle Npos1		# if so, goto Npos:
0x09a: c0f00100000000000000 | 	iaddq $0x1, %rax	
0x0a4:                      | Npos1:
0x0a4: 50a71000000000000000 | 	mrmovq 0x10(%rdi), %r10	# read val from src...
0x0ae: 50971800000000000000 | 	mrmovq 0x18(%rdi), %r9
0x0b8: 40a61000000000000000 | 	rmmovq %r10, 0x10(%rsi)	# ...and store it to dst
0x0c2: 40961800000000000000 | 	rmmovq %r9, 0x18(%rsi)
0x0cc: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0ce: 71e100000000000000   | 	jle Npos2		# if so, goto Npos:
0x0d7: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x0e1:                      | Npos2:
0x0e1: 6299                 | 	andq %r9, %r9		# val <= 0?
0x0e3: 71f600000000000000   | 	jle Npos3		# if so, goto Npos:
0x0ec: c0f00100000000000000 | 	iaddq $0x1, %rax
0x0f6:                      | Npos3:
0x0f6: 50a72000000000000000 | 	mrmovq 0x20(%rdi), %r10	# read val from src...
0x100: 50972800000000000000 | 	mrmovq 0x28(%rdi), %r9
0x10a: 40a62000000000000000 | 	rmmovq %r10, 0x20(%rsi)	# ...and store it to dst
0x114: 40962800000000000000 | 	rmmovq %r9, 0x28(%rsi)
0x11e: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x120: 713301000000000000   | 	jle Npos4		# if so, goto Npos:
0x129: c0f00100000000000000 | 	iaddq $0x1, %rax
0x133:                      | Npos4:
0x133: 6299                 | 	andq %r9, %r9		# val <= 0?
0x135: 714801000000000000   | 	jle Npos5		# if so, goto Npos:
0x13e: c0f00100000000000000 | 	iaddq $0x1, %rax
0x148:                      | Npos5:
0x148: c0f63000000000000000 | 	iaddq $0x30, %rsi		# dst++
0x152: c0f73000000000000000 | 	iaddq $0x30, %rdi		# src++
0x15c: 703f00000000000000   | 	jmp Loop6
0x165:                      | Else:
0x165: c0f20600000000000000 | 	iaddq $6, %rdx
0x16f: 733602000000000000   | 	je Done
0x178:                      | Loop:	
0x178: c0f2feffffffffffffff | 	iaddq $-2, %rdx
0x182: 72fa01000000000000   | 	jl Over
0x18b: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x195: 50970800000000000000 | 	mrmovq 0x8(%rdi), %r9
0x19f: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x1a9: 40960800000000000000 | 	rmmovq %r9, 0x8(%rsi)
0x1b3: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x1b5: 71c801000000000000   | 	jle Npos6		# if so, goto Npos:
0x1be: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x1c8:                      | Npos6:
0x1c8: 6299                 | 	andq %r9, %r9		# val <= 0?
0x1ca: 71dd01000000000000   | 	jle Npos7		# if so, goto Npos:
0x1d3: c0f00100000000000000 | 	iaddq $0x1, %rax	
0x1dd:                      | Npos7:
0x1dd: c0f61000000000000000 | 	iaddq $0x10, %rsi		# dst++
0x1e7: c0f71000000000000000 | 	iaddq $0x10, %rdi		# src++
0x1f1: 707801000000000000   | 	jmp Loop	
0x1fa:                      | Over:	
0x1fa: c0f20200000000000000 | 	iaddq $2, %rdx
0x204: 733602000000000000   | 	je Done
0x20d: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x217: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x221: 62aa                 | 	andq %r10, %r10
0x223: 713602000000000000   | 	jle Done
0x22c: c0f00100000000000000 | 	iaddq $1, %rax
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x236:                      | Done:
0x236: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x237:                      | End:
                            | #/* $end ncopy-ys */
0x237:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x238:                      | 	.align 8
0x238:                      | src:
0x238: 0100000000000000     | 	.quad 1
0x240: 0200000000000000     | 	.quad 2
0x248: 0300000000000000     | 	.quad 3
0x250: fcffffffffffffff     | 	.quad -4
0x258: fbffffffffffffff     | 	.quad -5
0x260: faffffffffffffff     | 	.quad -6
0x268: 0700000000000000     | 	.quad 7
0x270: 0800000000000000     | 	.quad 8
0x278: f7ffffffffffffff     | 	.quad -9
0x280: f6ffffffffffffff     | 	.quad -10
0x288: 0b00000000000000     | 	.quad 11
0x290: f4ffffffffffffff     | 	.quad -12
0x298: f3ffffffffffffff     | 	.quad -13
0x2a0: f2ffffffffffffff     | 	.quad -14
0x2a8: 0f00000000000000     | 	.quad 15
0x2b0: f0ffffffffffffff     | 	.quad -16
0x2b8: 1100000000000000     | 	.quad 17
0x2c0: eeffffffffffffff     | 	.quad -18
0x2c8: 1300000000000000     | 	.quad 19
0x2d0: ecffffffffffffff     | 	.quad -20
0x2d8: ebffffffffffffff     | 	.quad -21
0x2e0: eaffffffffffffff     | 	.quad -22
0x2e8: 1700000000000000     | 	.quad 23
0x2f0: 1800000000000000     | 	.quad 24
0x2f8: 1900000000000000     | 	.quad 25
0x300: e6ffffffffffffff     | 	.quad -26
0x308: 1b00000000000000     | 	.quad 27
0x310: e4ffffffffffffff     | 	.quad -28
0x318: 1d00000000000000     | 	.quad 29
0x320: e2ffffffffffffff     | 	.quad -30
0x328: 1f00000000000000     | 	.quad 31
0x330: e0ffffffffffffff     | 	.quad -32
0x338: dfffffffffffffff     | 	.quad -33
0x340: deffffffffffffff     | 	.quad -34
0x348: 2300000000000000     | 	.quad 35
0x350: 2400000000000000     | 	.quad 36
0x358: 2500000000000000     | 	.quad 37
0x360: 2600000000000000     | 	.quad 38
0x368: d9ffffffffffffff     | 	.quad -39
0x370: d8ffffffffffffff     | 	.quad -40
0x378: d7ffffffffffffff     | 	.quad -41
0x380: d6ffffffffffffff     | 	.quad -42
0x388: d5ffffffffffffff     | 	.quad -43
0x390: 2c00000000000000     | 	.quad 44
0x398: d3ffffffffffffff     | 	.quad -45
0x3a0: 2e00000000000000     | 	.quad 46
0x3a8: d1ffffffffffffff     | 	.quad -47
0x3b0: d0ffffffffffffff     | 	.quad -48
0x3b8: 3100000000000000     | 	.quad 49
0x3c0: ceffffffffffffff     | 	.quad -50
0x3c8: cdffffffffffffff     | 	.quad -51
0x3d0: 3400000000000000     | 	.quad 52
0x3d8: cbffffffffffffff     | 	.quad -53
0x3e0: 3600000000000000     | 	.quad 54
0x3e8: c9ffffffffffffff     | 	.quad -55
0x3f0: c8ffffffffffffff     | 	.quad -56
0x3f8: 3900000000000000     | 	.quad 57
0x400: 3a00000000000000     | 	.quad 58
0x408: 3b00000000000000     | 	.quad 59
0x410: 3c00000000000000     | 	.quad 60
0x418: 3d00000000000000     | 	.quad 61
0x420: 3e00000000000000     | 	.quad 62
0x428: 3f00000000000000     | 	.quad 63
0x430: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x440:                      | 	.align 16
0x440:                      | Predest:
0x440: fadebc0000000000     | 	.quad 0xbcdefa
0x448:                      | dest:
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640:                      | Postdest:
0x640: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x648:                      | .align 8
                            | # Run time stack
0x648: 0000000000000000     | 	.quad 0
0x650: 0000000000000000     | 	.quad 0
0x658: 0000000000000000     | 	.quad 0
0x660: 0000000000000000     | 	.quad 0
0x668: 0000000000000000     | 	.quad 0
0x670: 0000000000000000     | 	.quad 0
0x678: 0000000000000000     | 	.quad 0
0x680: 0000000000000000     | 	.quad 0
0x688: 0000000000000000     | 	.quad 0
0x690: 0000000000000000     | 	.quad 0
0x698: 0000000000000000     | 	.quad 0
0x6a0: 0000000000000000     | 	.quad 0
0x6a8: 0000000000000000     | 	.quad 0
0x6b0: 0000000000000000     | 	.quad 0
0x6b8: 0000000000000000     | 	.quad 0
0x6c0: 0000000000000000     | 	.quad 0
                            | 
0x6c8:                      | Stack:
